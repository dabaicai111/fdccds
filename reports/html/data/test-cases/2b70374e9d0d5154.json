{
  "uid" : "2b70374e9d0d5154",
  "name" : "test_change_pwd_var[添加商品分类_全字段正常流_3]",
  "fullName" : "test_case.demo.test_aip_project_zhouri.test_tianjiashangpin#test_change_pwd_var[添加商品分类_全字段正常流_3]",
  "historyId" : "26f5090c98b4db6d176f8a95a44eb99c",
  "time" : {
    "start" : 1564287899902,
    "stop" : 1564287900021,
    "duration" : 119
  },
  "status" : "failed",
  "statusMessage" : "AssertionError",
  "statusTrace" : "token = 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImNyZWF0ZWQiOjE1NjQyODc4NzIxNzMsImV4cCI6MTU2NDg5MjY3Mn0.pakIRU70tIZuJ7svN5XXZ_t6hkMK7hlJxiJPhxAT1Kz4fPhYdmfM3sGJ_qzUSfbEDsaf-TrAjwPSEBNGw7N21g'\nuri = '/productCategory/create'\ndatas = '{\\n  \"description\": \"fghfhfhfghfhfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg... \"parentId\": 0,\\n  \"productAttributeIdList\": [\\n    1\\n  ],\\n  \"productUnit\": \"件\",\\n  \"showStatus\": 0,\\n  \"sort\": 0\\n}'\ncode = 200.0\n\n    @pytest.mark.parametrize('uri,datas,code',data[1],ids=data[0])\n    @allure.feature('商品分类管理')\n    def test_change_pwd_var(token,uri,datas,code):\n        # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n        url = conf.GY_API_URL + uri\n        req = json.loads(datas)\n        headers = {\n            'Authorization': token,\n            'charset': 'UTF-8'\n        }\n        resp = request_tool.post_request(url, json=req,headers=headers)\n        body = resp.json()\n        # 判断响应码\n        with allure.step('响应断言，实际断言:{}，预期结果为200'.format(resp.status_code)):pass\n        assert_tool.assert_equal(resp.status_code, 200)\n        # 自定义断言\n        with allure.step('响应断言，实际断言:{}，预期结果为:{}'.format(body['code'], 'code')):pass\n>       assert_tool.assert_equal(body['code'], 'code')\n\ntest_case\\demo\\test_aip_project_zhouri\\test_tianjiashangpin.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = 200, expected_msg = 'code'\n\n    def assert_equal(body, expected_msg):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_msg\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:35: AssertionError",
  "flaky" : true,
  "beforeStages" : [ {
    "name" : "token",
    "time" : {
      "start" : 1564287899399,
      "stop" : 1564287899571,
      "duration" : 172
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "1d8d56f6cf552bad",
      "name" : "请求",
      "source" : "1d8d56f6cf552bad.txt",
      "type" : "text/plain",
      "size" : 274
    }, {
      "uid" : "c3d83c21611ce78e",
      "name" : "响应",
      "source" : "c3d83c21611ce78e.txt",
      "type" : "text/plain",
      "size" : 629
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 2,
    "shouldDisplayMessage" : false,
    "stepsCount" : 0,
    "hasContent" : true
  } ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "AssertionError",
    "statusTrace" : "token = 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImNyZWF0ZWQiOjE1NjQyODc4NzIxNzMsImV4cCI6MTU2NDg5MjY3Mn0.pakIRU70tIZuJ7svN5XXZ_t6hkMK7hlJxiJPhxAT1Kz4fPhYdmfM3sGJ_qzUSfbEDsaf-TrAjwPSEBNGw7N21g'\nuri = '/productCategory/create'\ndatas = '{\\n  \"description\": \"fghfhfhfghfhfggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg... \"parentId\": 0,\\n  \"productAttributeIdList\": [\\n    1\\n  ],\\n  \"productUnit\": \"件\",\\n  \"showStatus\": 0,\\n  \"sort\": 0\\n}'\ncode = 200.0\n\n    @pytest.mark.parametrize('uri,datas,code',data[1],ids=data[0])\n    @allure.feature('商品分类管理')\n    def test_change_pwd_var(token,uri,datas,code):\n        # config/conf.py里面配置GY_API_URL,模板快捷键demo_conf_api\n        url = conf.GY_API_URL + uri\n        req = json.loads(datas)\n        headers = {\n            'Authorization': token,\n            'charset': 'UTF-8'\n        }\n        resp = request_tool.post_request(url, json=req,headers=headers)\n        body = resp.json()\n        # 判断响应码\n        with allure.step('响应断言，实际断言:{}，预期结果为200'.format(resp.status_code)):pass\n        assert_tool.assert_equal(resp.status_code, 200)\n        # 自定义断言\n        with allure.step('响应断言，实际断言:{}，预期结果为:{}'.format(body['code'], 'code')):pass\n>       assert_tool.assert_equal(body['code'], 'code')\n\ntest_case\\demo\\test_aip_project_zhouri\\test_tianjiashangpin.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nbody = 200, expected_msg = 'code'\n\n    def assert_equal(body, expected_msg):\n        \"\"\"\n        验证response body中是否等于预期字符串\n        :param body:\n        :param expected_msg:\n        :return:\n        \"\"\"\n        try:\n>           assert body == expected_msg\nE           AssertionError\n\nvenv\\lib\\site-packages\\tools\\assert_tool.py:35: AssertionError",
    "steps" : [ {
      "name" : "响应断言，实际断言:200，预期结果为200",
      "time" : {
        "start" : 1564287900020,
        "stop" : 1564287900020,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "响应断言，实际断言:200，预期结果为:code",
      "time" : {
        "start" : 1564287900021,
        "stop" : 1564287900021,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ {
      "uid" : "1b5cd98623166721",
      "name" : "请求",
      "source" : "1b5cd98623166721.txt",
      "type" : "text/plain",
      "size" : 903
    }, {
      "uid" : "a0300065db4522a4",
      "name" : "响应",
      "source" : "a0300065db4522a4.txt",
      "type" : "text/plain",
      "size" : 413
    }, {
      "uid" : "86ee839e018bf58",
      "name" : "log",
      "source" : "86ee839e018bf58.txt",
      "type" : "text/plain",
      "size" : 2507
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 3,
    "shouldDisplayMessage" : true,
    "stepsCount" : 2,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "商品分类管理"
  }, {
    "name" : "parentSuite",
    "value" : "test_case.demo.test_aip_project_zhouri"
  }, {
    "name" : "suite",
    "value" : "test_tianjiashangpin"
  }, {
    "name" : "subSuite"
  }, {
    "name" : "host",
    "value" : "SKY-20190220JWP"
  }, {
    "name" : "thread",
    "value" : "4964-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_case.demo.test_aip_project_zhouri.test_tianjiashangpin"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "code",
    "value" : "200.0"
  }, {
    "name" : "datas",
    "value" : "'{\n  \"description\": \"fghfhfhfghfhfgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggfgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\",\n  \"icon\": \"http://img5.imgtn.bdimg.com/it/u=3300305952,1328708913&fm=26&gp=0.jpg\",\n  \"keywords\": \"s\",\n  \"name\": \"车\",\n  \"navStatus\": 0,\n  \"parentId\": 0,\n  \"productAttributeIdList\": [\n    1\n  ],\n  \"productUnit\": \"件\",\n  \"showStatus\": 0,\n  \"sort\": 0\n}'"
  }, {
    "name" : "uri",
    "value" : "'/productCategory/create'"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "1757df7f1f5a1c1",
      "status" : "broken",
      "statusDetails" : "KeyError: 'tokenHea'",
      "time" : {
        "start" : 1564287749949,
        "stop" : 1564287749949,
        "duration" : 0
      }
    }, {
      "uid" : "a9041bf956bed1e9",
      "status" : "broken",
      "statusDetails" : "KeyError: 'tokenHea'",
      "time" : {
        "start" : 1564287622308,
        "stop" : 1564287622308,
        "duration" : 0
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "2b70374e9d0d5154.json",
  "parameterValues" : [ "200.0", "'{\n  \"description\": \"fghfhfhfghfhfgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggggfgggggggggggggggggggggggggggggggggggggggggggggggggggggggggggg\",\n  \"icon\": \"http://img5.imgtn.bdimg.com/it/u=3300305952,1328708913&fm=26&gp=0.jpg\",\n  \"keywords\": \"s\",\n  \"name\": \"车\",\n  \"navStatus\": 0,\n  \"parentId\": 0,\n  \"productAttributeIdList\": [\n    1\n  ],\n  \"productUnit\": \"件\",\n  \"showStatus\": 0,\n  \"sort\": 0\n}'", "'/productCategory/create'" ]
}